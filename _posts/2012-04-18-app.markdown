---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Rails Girls App Tutorial

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Переконайся, що rails встановлено.** Як це зробити, може прочитати [**тут**](/install)

## Засоби
<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>

### Редактори тексту

* [Atom](https://atom.io/), [Sublime Text](http://www.sublimetext.com),  [Vim](http://www.vim.org/) та [Emacs](https://www.gnu.org/software/emacs/) - приклади редакторів тексту, в яких ти можеш писати і редагувати код.

<h3><i class="icon-prompt">&nbsp;</i></h3>

### Термінал (або командний рядок в Windows)
* Місце, де ми запускатимемо сервер і виконуватимемо системні команди.
* Пошукай серед інстальованих програм, ввівши "Terminal" чи "Command Prompt"

<h3><i class="icon-browser">&nbsp;</i></h3>

### Веб переглядачі
* (Firefox, Safari, Chrome) для перегдяду застосунку.

В цій інструкціїї ти побачиш багато коду, що позначається так:
{% highlight sh %}
some code
{% endhighlight %}

<div>
<p> Це означає, що виділений текст - це програмний код, його варто виконати чи додати до своїх файлів. Зображення обіля виділеного тексту допоможе тобі знати, який засіб використати.</p>
<p> Наприклад, якщо ти бачиш зображення терміналу біля виділеного тексту, як в прикладі вище, то варто скопіювати цей код у термінал чи командну стрічку.</p>
</div>


### Увага!

Якщо ти використовуєш хмарне оточення (наприклад, Codenvy), тобі потрібно запускати команди, що призначені для Linux, навіть, якщо у тебе комп'ютер із Windows.

## *1.*Створення застосунку

Створимо новий застосунок Rails із назвою *railsgirls*

Спершу відкриємо териінал:
* Хмарний сервіс (як-от, Codenvy): Увійди в свій акаунт і створи новий проект, і переключись на IDE (за деталями дивись [інструкцію по встановленні](/install#using-a-cloud-service)). Термінал зазвичай знаходиться унизу вікна переглядача.

Тепер введи ці команди в термінал:

<div class="os-specific">
<div class="nix">
{% highlight sh %}
mkdir projects
{% endhighlight %}

<div>
    <p>
        Перевіремо , що папка <code>projects</code> створена, запустивши таку команду: <code>ls</code>. Маємо  побачити папку <code>projects</code> в терміналі. Тепер ти можеш перейти в папку <code>projects</code>, запустивши команду:
    </p>
</div>

{% highlight sh %}
cd projects
{% endhighlight %}

<div>
    <p>
        Перевіримо, чи ми в пустій папці, запустивши знову команду <code>ls</code>. Тепер створимо новий застосунок з назвою <code>railsgirls</code>, запустивши команду:
    </p>
</div>

{% highlight sh %}
sudo apt-get update
{% endhighlight %}

{% highlight sh %}
sudo apt-get install ruby-dev
{% endhighlight %}

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

<div>
    <p>
        Це створить новий застосунок в папці <code>railsgirls</code>. Знову змінемо папку, що бути всередині нашого Rails застосунку, запустивши:
    </p>
</div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

<div>
    <p>
        Якщо запустити команду <code>ls</code>,то побачимо папки типу <code>app</code> і <code>config</code>. Тепер запустимо rails сервер, виконавши наступну команду:
    </p>
</div>

{% highlight sh %}
rails server
{% endhighlight %}

</div>

<div class="win">
{% highlight sh %}
mkdir projects
{% endhighlight %}

<div>
    <p>
        Перевіремо, що папка <code>projects</code> створена, запустивши таку команду: <code>dir</code>. Має бути папка <code>projects</code> в терміналі. Перейдемо в папку <code>projects</code>, запустивши команду:
    </p>
</div>

{% highlight sh %}
cd projects
{% endhighlight %}

<div>
    <p>
        Ти можеш перевірити, що ти у пустій папці, запустивши знову команду <code>dir</code>. Тепер створимо новий застосунок з назвою <code>railsgirls</code>, запустивши команду:
    </p>
</div>

{% highlight sh %}
rails new railsgirls
{% endhighlight %}

<div>
    <p>
        Це створить новий застосунок в папці <code>railsgirls</code>. Знову змінемо папку, що бути всередині нашого Rails застосунку, запустивши:
    </p>
</div>

{% highlight sh %}
cd railsgirls
{% endhighlight %}

<div>
    <p>
        Якщо запустити команду <code>dir</code> у цій папці побачимо папки типу <code>app</code> і <code>config</code>. Тепер запустимо rails сервер, виконавши наступну команду:
    </p>
</div>

{% highlight sh %}
rails server
{% endhighlight %}
  </div>
</div>

Відкрий <http://localhost:3000> у браузері. Якщо використовуєш хмарний сервіс (як-от, Codenvy), використовуй функцію перегляду (дивись [інструкція встановлення](/install#using-a-cloud-service) за деталями).

Маєш побачити сторінку з логотипом Rails і написом: "Yay! You're on Rails!", що означає - твій застосунок готовий і запущений.

Зваж у цьому вікні командний рядок не видно, адже ти зараз в сервері Rails. Командний рядок виглядає ось так:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
$
{% endhighlight %}
  </div>
  <div class="win">
{% highlight sh %}
>
{% endhighlight %}
  </div>
</div>

**Підказка:** Інколи у різних інструкціях ти можеш побачити команди, що написані з символом `$` напочатку. Це домовленість, що означає початок рядку, яку треба ввести у термінал.
Тобі не потрібно вводити цей символ на спочатку команди. Твій командний рядок може не мати символу `$` на початку команди.

Коли командна стрічка невидима, ти не можеш виконувати команди. Якщо ти спробуєш `cd` чи іншу команду - вони не спрацюють. Щоб повернутись до звичного режиму командної стрічки:

Натисни <kbd>Ctrl</kbd>+<kbd>C</kbd> в вікні терміналу, що завершити роботу сервера.

**Ментор:** Поясни, що кожна команда робить. Що було згенеровано? Що сервер робить?


## *2.*Створення scaffold'у Ідея

Завдяки rails scaffold швидко згенеруємо необхідні файли, які дозволять, додавати, видаляти, редагувати ідеї.

**Ментор:** Що таке rails scaffold (Поясни цю команду, ім'я моделі і відповідну їй таблицю бази даних, домовленості по називанню атрибутів, типів і т.д. Що таке міграції і чому ми повинні їх використовувати?

{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
{% endhighlight %}

Scaffold створює нові файли в папці проекту. Щоб все запрацювало, ми повинні виконати декілька команд, що оновлять базу даних і перезавантажать сервер.

{% highlight sh %}
bundle exec rake db:migrate
{% endhighlight %}


Відкриємо <http://localhost:3000/ideas> в браузері. Для користувачів хмарних сервісів (як-от, Codenvy) інструкція тут [installation guide](/install#using-a-cloud-service)).

Поглянь на результат цих команд, понатискай на посилання.

## *3.*Дизайн

**Ментор:** Розкажи про відношення між HTML і Rails. Яка відмінність між HTML і Embedded Ruby (ERB)? Що таке MVC? Яка частина за що відповдає?

Сайт виглядає не дуже гарно, чи не так? Давай додамо Twitter Bootstrap в твій проект, що допоможе покращити вигляд.

Відкриємо `app/views/layouts/application.html.erb` в текстовому редакторі і над цією стрічкою

{% highlight erb %}
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
{% endhighlight %}

додамо

{% highlight erb %}
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.css">
<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap-theme.css">
{% endhighlight %}

і замінемо це

{% highlight erb %}
<%= yield %>
{% endhighlight %}

цим

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Додамо  навігацію і footer до шаблону. В цьому ж файлі під `<body>` додамо
{% highlight html %}
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="container">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="/">The Idea app</a>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</nav>
{% endhighlight %}

і перед `</body>` додамо

{% highlight erb %}
<footer>
  <div class="container">
    Rails Girls <%= Time.now.year %>
  </div>
</footer>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/3.0.3/js/bootstrap.js"></script>
{% endhighlight %}

Тепер змінемо вигляд таблиці з ідеями. Відкриємо `app/assets/stylesheets/application.css` і внизу сторінки додамо

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle; border: none; }
th { border-bottom: 1px solid #DDD; }
{% endhighlight %}

Переконайся, що ти зберіг змінені файли і перезавантаж сторінку в браузері. Ти можеш змінити HTML і CSS потім.

**Ментор:** Розкажи трохи про CSS.

## *4.*Додаємо зображення на сторіку.

Потрібно встановити програму, що дозволить завантажувати файли в rails.

Відкрий `Gemfile` в папці проекту за допомогою редактора і під рядком

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

додай

{% highlight ruby %}
gem 'carrierwave'
gem 'net-ssh'
{% endhighlight %}

**Ментор:** Поясни, що таке бібліотеки і чим вони корисні. Опиши, що таке відкрите програмне забезпечення.

Натисни <kbd>Ctrl</kbd>+<kbd>C</kbd> в терміналі, щоб зупинити сервер.

В терміналі запустимо:

{% highlight sh %}
bundle
{% endhighlight %}

Тепер згенеруємо код для можливості завантаження файлів. В терміналі виконаємо:

{% highlight sh %}
bundle exec rails generate uploader Picture
{% endhighlight %}

Тепер запустимо сервер rails.

Відкриємо `app/models/idea.rb` і під рядком

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

додамо

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Відкриємо `app/views/ideas/_form.html.erb` і змінемо

{% highlight erb %}
    <%= f.text_field :picture %>
{% endhighlight %}

на

{% highlight erb %}
<%= f.file_field :picture, id: :idea_picture %>
{% endhighlight %}

В браузері додамо нову ідею з картинкою. Коли ти завантажиш картинку, вона виглядає не надто гарно, бо видно тільки шлях до файлу. Давай виправимо це.

Відкриємо `app/views/ideas/show.html.erb` і замінемо

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

на

{% highlight erb %}
<%= image_tag(@idea.picture_url, width: 600) if @idea.picture.present? %>
{% endhighlight %}

Тепер перезавантаж сторінку в браузері, щоб побачити зміни.

**Ментор:** Розкажи трохи про HTML.


## *5.* Покращення шляхів

Відкриємо <http://localhost:3000> (або сторінку перегляду, якщо використовуєш хмарний сервіс). Там ще досі є напис "Yay! You’re on Rails!" на сторінці. Зробимо так, щоб посилання вело на сторінку з ідеями.

Відкриємо `config/routes.rb` і після першого рядку додамо:

{% highlight ruby %}
root to: redirect('/ideas')
{% endhighlight %}

Перевіремо зміни, відкривши корінь сайту, тобто <http://localhost:3000/>, або сторінку перегляду в браузері.

**Ментор:** Розкажи про шляхи, порядок шляхів і відношення до статичних файлів.

## Створимо статичну сторінку сайту

Додамо статичну сторінку для нашого сайту, яка містить інформацію про автора цього сайту - тебе!

{% highlight sh %}
bundle exec rails generate controller pages info
{% endhighlight %}

Ця команда створить нову папку в `app/views` з назвою `/pages` і у цій папці створимо файл `info.html.erb`, що буде твоєю сторінкою з інформацією.

Вона також додасть новий простий шлях в файлі routes.rb.

{% highlight ruby %}
get "pages/info"
{% endhighlight %}

Тепер ти можеш відкрити файл `app/views/pages/info.html.erb` і додати інформацію про тебе в HTML. Щоб побачити твою нову сторінку з інформацією, відкрий в браузері <http://localhost:3000/pages/info>, або, якщо користуєшся хмарним сервісом - додай '/pages/info' в кінець посилання для перегляду.

## *6+.* Що тепер?

* Додамо дизайн з HTML i CSS
* Додамо рейтинг
* Додамо інтерактивність за допомогою JavaScript чи CoffeeScript
* Змінемо розмір зображень, щоб пришвидшити завантаження картинок.

## Додаткові інструкції

* Guide 0: [Корисні команди для rails, ruby і т.д.](http://www.pragtob.info/rails-beginner-cheatsheet/)
* Guide 1: [Додаємо коментарі](/commenting.html)
* Guide 2: [Публікація сайту в інтернеті за допомогою heroku](/heroku.html) / [Публікація сайту в інтернеті за допомогою OpenShift](/openshift.html) / [Публікація сайту в інтернеті за допомогою anynines](/anynines.html) / [Публікація сайту в інтернеті за допомогою Trucker.io](/trucker.html)
* Guide 3: [Створення зображень для перегляду](/thumbnails.html)
* Guide 4: [Додавання дизайну з СSS i HTML](/design.html)
* Guide 5: [Додавання автентифікації з Devise](/devise.html)
* Guide 6: [Додавання картинок профілю з Gravatar](/gravatar.html)
* Guide 7: [Тестування додатку з  RSpec](/testing-rspec.html)
* Guide 8: [Continuous Deployment з Travis-CI](/continuous-travis.html) / [Continuous Deployment х Codeship](/continuous.html) / [Continuous Deployment з Snap CI](/continuous-snap-ci.html)
* Guide 9: [Додаткові пояснення](https://github.com/lbain/railsgirls.html)
* Guide 10: [Створення back-end з Active Admin](/backend-with-active-admin.html)
